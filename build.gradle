buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version "${shadow_version}"
}

subprojects {
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'org.parchmentmc.librarian.forgegradle'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'

    def enableMixin = false
    if (project.hasProperty("enable_mixin")) {
        enableMixin = project.enable_mixin
    }

    // MixinGradle:
    if (enableMixin) {
        apply plugin: 'org.spongepowered.mixin'
    }

    version = getVersionString(project)
    group = 'com.enderio'
    archivesBaseName = getArchiveBaseName(project)
    def modId = getModId(project)

    // Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
    minecraft {
        mappings channel: "${mappings_channel}", version: "${mappings_version}"

        // Default run configurations.
        runs {
            client {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'REGISTRIES'
                property 'forge.logging.console.level', 'debug'

                // Allow dependent mixins to run
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

                mods {
                    "${project.name}" {
                        source sourceSets.main
                    }
                }
            }

            server {
                workingDirectory project.file('run')

                property 'forge.logging.console.level', 'debug'

                // Allow dependent mixins to run
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

                mods {
                    "${project.name}" {
                        source sourceSets.main
                    }
                }
            }

            data {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'REGISTRIES'
                property 'forge.logging.console.level', 'debug'

                // Allow dependent mixins to run
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

                // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
                args '--mod', modId, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

                mods {
                    "${project.name}" {
                        source sourceSets.main
                    }
                }
            }
        }
    }

    configurations {
        shade
    }

    // Include resources generated by data generators.
    sourceSets.main.resources { srcDir 'src/generated/resources' }

    repositories {
        // Registrate
        maven { url "https://maven.tterrag.com/" }

        maven {
            // location of the maven that hosts JEI files
            name = "Progwml6 maven"
            url = "https://dvs1.progwml6.com/files/maven/"
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev"
        }

        // Temp for TOP, https://github.com/McJtyMods/TheOneProbe/issues/506
        maven {
            url "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
    }

    dependencies {
        minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

        compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
        runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

//        implementation fg.deobf("mcjty.theoneprobe:TheOneProbe:${minecraft_version}-${top_version}")
        implementation fg.deobf("curse.maven:the-one-probe-245211:${top_version}")

        def registrate = "com.tterrag.registrate:Registrate:${registrate_version}"
        implementation fg.deobf(registrate)
        shade registrate

        // Apply Mixin AP
        if (enableMixin)
            annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
    }

    if (enableMixin) {
        mixin {
            // MixinGradle Settings
            add sourceSets.main, "mixins.${modId}.refmap.json"
            config "mixins.${modId}.json"
        }
    }

    // Example for how to get properties into the manifest for reading at runtime.
    jar {
        destinationDirectory.set(file("$rootDir/build/libs"))
        manifest {
            attributes([
                    "Specification-Title"     : "${modId}",
                    "Specification-Vendor"    : "EnderIO",
                    "Specification-Version"   : "${project.version}",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${project.version}",
                    "Implementation-Vendor"   : "EnderIO",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    // region Tasks

    task cleanJars {
        delete "$rootDir/build/libs"
        delete "$buildDir/libs"
    }

    shadowJar {
        configurations = [project.configurations.shade]
        relocate 'com.tterrag.registrate', 'com.enderio.repack.registrate'
    }

    reobf {
        shadowJar {}
    }

    if (project.hasProperty("releaseBuild") && project.releaseBuild == true) {
        jar.finalizedBy('reobfJar')
    }
    publish.dependsOn('reobfJar')

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact jar
                artifactId = getArchiveBaseName(project)
            }
        }
        repositories {
            def pubHypherion = System.getenv('MAVEN_URL') != null

            //if (pubHypherion) {
            maven {
                url System.getenv('MAVEN_URL')
                credentials {
                    username System.getenv('MAVEN_USER')
                    password System.getenv('MAVEN_PASS_2')
                }
            }
            //} else {
            maven {
                url "https://maven.nerdthings.dev/snapshots"
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
            //}
        }
    }

    // endregion
}

// region Versioning

// This is the new version/module format:
// module name:
//   enderio-<name>-<mc-version>-<version>
// version:
//   <major>.<minor>.<patch>-<cls>-<hash>
// patch:
//   defaults to 'version_patch'
//   overriten by CI / build server
// cls (classifier):
//   * nightly
//   * dev
//   * ci
//   * snapshot
//   * etc.
// hash:
//   if on a dev machine - the current commit hash

// Examples:
//   * enderio-base-1.12.2-4.0.1.jar            :: release version 4.0.1 for mc 1.12.2
//   * enderio-base-1.12.2-4.2.1-nightly-4      :: nightly build no. 4 for version 4.2.1
//   * enderio-base-1.12.2-4.5.1-dev-c91c8ee6e  :: dev (local) build for commit c91c8ee6e
String getVersionString(Project proj) {
    def build_server = System.getenv('CI') != null || System.getenv('BUILD_NUMBER') != null

    def version_patch_lc = proj.version_patch
    if (System.getenv('BUILD_NUMBER') != null)
        version_patch_lc = System.getenv('BUILD_NUMBER')

    def version_classifier = ''
    if (System.getenv('VERSION_CLS') != null)
        version_classifier = System.getenv('VERSION_CLS')
    else if (System.getenv('NIGHTLY') != null)
        version_classifier = 'nightly'

    def version_hash = ''
    if (!build_server) {
        try {
            version_hash = "git rev-parse --short HEAD".execute().text.trim()
        } catch (all) {
        }
    }

    def version_base = "${proj.version_major}.${proj.version_minor}.${version_patch_lc}"
    def version_parts = ([version_base, version_classifier, version_hash]).findAll { p -> p != '' }

    return String.join('-', version_parts)
}

String getPrettyName(Project proj) {
    if (proj.hasProperty('module_name'))
        return rootProject.name + "-${proj.module_name}"
    return proj.name
}

String getArchiveBaseName(Project proj) {
    return getPrettyName(proj) + "-${rootProject.minecraft_version}"
}

String getModId(Project proj) {
    // Force enderio-base -> enderio.
    if (proj.hasProperty("modid"))
        return proj.modid;
    return proj.name.replaceAll('-', '_');
}

// endregion
